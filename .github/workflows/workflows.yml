# This workflow will do a clean install of swift dependencies, build the source code and run tests across different versions of swift
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-swift-with-github-actions

name: Swift CI

on:
  push:
    branches: [ main, 1.x ]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-lint:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/realm/swiftlint:5.6-latest
    steps:
    - name: Get Swift Version
      id: get-swift-version
      run: |
        echo "::set-output name=version::$(swift -version | head -n 1 | sed s/,// )"
      shell: bash
    - uses: actions/checkout@master
    - name: Cache resolved dependencies
      id: cache-resolved-dependencies
      uses: actions/cache@v2
      with:
        path: .build
        key: ${{ env.cache_version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-spm-deps-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ env.cache_version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-spm-deps-
    - name: Resolve dependencies
      if: steps.cache-resolved-dependencies.outputs.cache-hit != 'true'
      run: swift package resolve
    - name: Build
      run: swift build --build-tests
    - name: Lint
      run: swiftlint lint --config Plugins/SwiftLintPlugin/swiftlint.yml

  unit:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/realm/swiftlint:5.6-latest
    steps:
    - name: Get Swift Version
      id: get-swift-version
      run: |
        echo "::set-output name=version::$(swift -version | head -n 1 | sed s/,// )"
      shell: bash
    - uses: actions/checkout@master
    - name: Cache resolved dependencies
      id: cache-resolved-dependencies
      uses: actions/cache@v2
      with:
        path: .build
        key: ${{ env.cache_version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-spm-deps-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ env.cache_version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-spm-deps-
    - name: Resolve dependencies
      if: steps.cache-resolved-dependencies.outputs.cache-hit != 'true'
      run: swift package resolve
    - name: Build
      run: swift build --build-tests
    - name: Lint
      run: swiftlint lint --config Plugins/SwiftLintPlugin/swiftlint.yml 
    - name: Test
      run: swift test --filter XRPLSwiftUTests

  integration:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/realm/swiftlint:5.6-latest
    services:
      rippled:
        image: natenichols/rippled-standalone:latest
        ports:
        - 6006:6006
        options:
          --health-cmd="wget localhost:6006 || exit 1" --health-interval=5s --health-retries=10 --health-timeout=2s
    steps:
    - name: Get Swift Version
      id: get-swift-version
      run: |
        echo "::set-output name=version::$(swift -version | head -n 1 | sed s/,// )"
      shell: bash
    - uses: actions/checkout@master
    - name: Cache resolved dependencies
      id: cache-resolved-dependencies
      uses: actions/cache@v2
      with:
        path: .build
        key: ${{ env.cache_version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-spm-deps-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ env.cache_version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-spm-deps-
    - name: Resolve dependencies
      if: steps.cache-resolved-dependencies.outputs.cache-hit != 'true'
      run: swift package resolve
    - name: Build
      run: swift build --build-tests
    - name: Lint
      run: swiftlint lint --config Plugins/SwiftLintPlugin/swiftlint.yml 
    - name: Test
      run: swift test --filter XRPLSwiftITests
      env:
        HOST: localhost
        PORT: ${{ job.services.rippled.ports['6006'] }}